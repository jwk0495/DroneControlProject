using UnityEngine;
// ActUtlType64Lib?? ???? Manager.cs???? ???? ??????? ??????.

public class Manager1 : MonoBehaviour
{
    // ActUtlManager ?¥í?????? ???? ???? (?¥í???????? ???)
    public ActUtlManager actUtlManager;

    // Y ?????? ???¢¬? ???? (PLC?¥ê??? ?¬à??)
    private bool currentY0State;
    private bool currentY1State;
    private bool currentY2State;
    private bool currentY3State;
    private bool currentY4State;
    private bool currentY5State;

    // ?????? Unity ??????? ?????? ???? (?¥í???????? ???)
    public Chain1 chainInstance;
    public Chain1 chainInstance12;
    public PipeHolders pipeHolders;
    public ZLiftTigger zLift;

    // ManagerWrite ?????? ???? (?¥í???????? ???)
    public ManagerWrite1 managerWrite;

    void OnEnable()
    {
        // ActUtlManager???? ?????? ???? ?? ???? ???? ???? ?????? ????
        if (actUtlManager != null)
        {
            ActUtlManager.OnPlcDataReceived += HandlePlcData;
            ActUtlManager.OnConnectionStatusChanged += HandleConnectionStatusChange;
        }
    }

    void OnDisable()
    {
        // ?????? ?????? ?? ???? ???? ???? (??? ???? ????)
        if (actUtlManager != null)
        {
            ActUtlManager.OnPlcDataReceived -= HandlePlcData;
            ActUtlManager.OnConnectionStatusChanged -= HandleConnectionStatusChange;
        }
    }

    void Update()
    {
        managerWrite.WriteDevice(); 
    }

    /// <summary>
    /// ActUtlManager?¥ê??? PLC ??????? ??????? ????? ??? ???
    /// ?? ????? Unity?? ???? ???????? ???????.
    /// </summary>
    /// <param name="receivedData">PLC?¥ê??? ???? ???? ????? ?????? (??: "Y0YF:1234")</param>
    private void HandlePlcData(string receivedData)
    {
        // PLC ??? ????????? ???? ????? ??????? ?????? Unity ??????? ???¢¬? ???????????.
        // ActUtlManager?? Y0YF ???? ???? "Y0YF:??" ???¡¤? ???????.
        if (receivedData.StartsWith("Y0YF:"))
        {
            string[] parts = receivedData.Split(':');
            if (parts.Length == 2 && int.TryParse(parts[1], out int y0ToYFValue))
            {
                // Y0 ??? ???? ?? ???? ???? ????
                UpdateYStateBit(ref currentY0State, y0ToYFValue, 0, chainInstance != null ? chainInstance.ActivateChain : null, chainInstance != null ? chainInstance.DeactivateChain : null);
                // Y1 ??? ???? ?? ???? ???? ????
                UpdateYStateBit(ref currentY1State, y0ToYFValue, 1, chainInstance12 != null ? chainInstance12.ActivateChain : null, chainInstance12 != null ? chainInstance12.DeactivateChain : null);
                // Y2 ??? ???? ?? ???? ???? ????
                UpdateYStateBit(ref currentY2State, y0ToYFValue, 2, pipeHolders != null ? pipeHolders.ActivatePipeHoldersCW : null, pipeHolders != null ? pipeHolders.DeactivatePipeHoldersCW : null);
                // Y3 ??? ???? ?? ???? ???? ????
                UpdateYStateBit(ref currentY3State, y0ToYFValue, 3, pipeHolders != null ? pipeHolders.ActivatePipeHoldersCCW : null, pipeHolders != null ? pipeHolders.DeactivatePipeHoldersCCW : null);
                // Y4 ??? ???? ?? ???? ???? ????
                UpdateYStateBit(ref currentY4State, y0ToYFValue, 4, zLift != null ? zLift.ActivateZLiftUp : null, zLift != null ? zLift.DeactivateZLiftUp : null);
                // Y5 ??? ???? ?? ???? ???? ????
                UpdateYStateBit(ref currentY5State, y0ToYFValue, 5, zLift != null ? zLift.ActivateZLiftDown : null, zLift != null ? zLift.DeactivateZLiftDown : null);
            }
        }
        // ??? ?????? PLC ??????? ???? ???? ??? ??? ???? ????
    }

    /// <summary>
    /// PLC ???? ?????? ??? ????? ???¢¬? ???????, ???? ???? ?? Unity ????? ?????? ???? ?????
    /// </summary>
    private void UpdateYStateBit(ref bool currentState, int wordValue, int bitIndex, System.Action activateAction, System.Action deactivateAction)
    {
        bool newBitState = ((wordValue >> bitIndex) & 1) == 1;
        if (newBitState != currentState)
        {
            currentState = newBitState;
            if (currentState)
            {
                activateAction?.Invoke();
                // Debug.Log($"Y{bitIndex} ????");
            }
            else
            {
                deactivateAction?.Invoke();
                // Debug.Log($"Y{bitIndex} ??????");
            }
        }
    }

    /// <summary>
    /// PLC ???? ???? ????? ?????? ??? ???
    /// </summary>
    private void HandleConnectionStatusChange(bool connected)
    {
        if (connected)
        {
            Debug.Log("Manager: PLC ?????? ????????????.");
        }
        else
        {
            Debug.LogWarning("Manager: PLC ?????? ????????? ???????? ???????. ???????? ???? ??? ??...");
        }
    }
}